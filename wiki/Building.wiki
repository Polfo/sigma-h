#summary Guide to building Sigmah on Windows
#sidebar ContributorGuideSideBar

<wiki:toc max_depth="4" />

= Introduction =

This guide assumes that you're using Windows. 

== Tools to download and Install ==

Some of the functionality below is available through Eclipse or IntelliJ, but at some point you'll probably want to make a quick call to the command line.

  # [http://download.java.net/jdk6/ JDK, v1.6]
  # [http://tortoisesvn.net/downloads Tortoise SVN] - Windows explorer client for Subversion Version Control System
  # [http://www.open.collab.net/downloads/subversion/ CollabNet Subversion Command-Line Client] - Command-line client for Windows
  # [http://maven.apache.org/download.html Apache Maven] 2.2.1 - a build manager for Java. You just need to unzip it in the c:\Program Files folder.
  # Add the paths to the JDK, CollabNet subversion, and Maven paths to the path environment variable. (instructions for [http://www.computerhope.com/issues/ch000549.htm XP] [http://www.question-defense.com/2009/06/22/modify-a-users-path-in-windows-vista-vista-path-environment-variable/ Vista]
  # [http://www.mysql.com/downloads/mysql/ MySQL v5]

*Note:* Microsoft SQL server is no longer a supported database. We are now actively testing against MySQL 5.x and PostgreSQL.

== Quick build in command line ==

We'll get to the IDE in a moment, but first it would be good to confirm that you can successfully build Sigmah/ActivityInfo

  # Checkout a working copy 
{{{
svn checkout http://sigma-h.googlecode.com/svn/trunk sigmah
}}}
  # Change directory to the working copy
{{{
cd sigmah
}}}
  # Invoke the Maven compile and test phases
{{{
mvn test
}}}

Note :: the maven build fails on ubuntu if a subversion client 1.7 or greater is used to checkout the project. Please downgrade your subversion client to v1.6, and that should solve the issue. You can use synaptic package manager on ubuntu to easily downgrade libsvn1 and subversion to v1.6

Maven will automatically download all required dependencies, compile the project, and run unit and integration tests against an embedded database. 

== Setting up a development database ==

Out of the box, Sigmah will run against H2, an embedded database. As a developer, you will probably want to develop against a running database like MySQL that you can easily inspect and manipulate. 

You can tell sigmah to connect to your local database by creating a sigmah.properties file and saving it to your home directory. (C:\Users\XXXX on Windows Vista and later)

{{{
#
# All Sigmah code is released under the GNU General Public License v3
# See COPYRIGHT.txt and LICENSE.txt.
#

hibernate.dialect=org.hibernate.dialect.MySQLDialect
hibernate.connection.driver_class=com.mysql.jdbc.Driver
hibernate.connection.username=sa
hibernate.connection.password=adminpwd
hibernate.connection.url=jdbc:mysql://localhost/sigmah
hibernate.hbm2ddl.auto=update
hibernate.show_sql=true
hibernate.format_sql=true
}}}

In order to populate your database with minimum data, you can run follow the procedure to populate a new Sigmah instance as defined in the Administrator Guide at the following pages: 1.[http://code.google.com/p/sigma-h/wiki/InstallingSigmah#Preparing_the_Sigmah_database Preparing_the_Sigmah_database] and 2.[http://code.google.com/p/sigma-h/wiki/InstallingSigmah#Creating_your_first_organization Creating_your_first_organization]

== Starting GWT development mode in command line ==

For the time being, we are maintaining two separate GWT entry points: ActivityInfoEntryPoint, which will continue to meet the day-to-day needs of existing users, and SigmahEntryPoint, which adds a great deal of new functionality but is not yet ready for production use. 

You can launch GWT development mode for ActivityInfo by running
{{{
mvn gwt:run
}}}

and 
{{{
mvn -P Sigmah gwt:run
}}}

for the Sigmah module.

In order to run maven goal in offline mode, add -o option :
{{{
mvn -o gwt:run
}}}

== Build Sigmah under Eclipse ==

With IDE Eclipse, Java developer can benefit of many usefull plugins to edit the codes, build up the project and debug the project.This guide is based on the Eclipse IDE 3.6 Helios. 

=== Tools and Plugins to Install ===

  # [http://www.eclipse.org/downloads/ Eclipse] - The Eclipse IDE for Java EE developers
  #  [http://maven.apache.org/download.html Apache Maven] - a build manager for Java.
  # [http://subclipse.tigris.org/ Subclipse] or [http://www.eclipse.org/subversive/documentation/gettingStarted/aboutSubversive/install.php Subversive] - Two Eclipse Team Provider plug-in providing support for Subversion within the Eclipse IDE.
  # [http://m2eclipse.sonatype.org/installing-m2eclipse.html Maven plugin]2.2.1 - Plugins to allow developers to use Maven directly in Eclipse IDE
 
*Note:* You should add path of JDK and Maven into the environment PATH. See the instructions for both Windows and Unix [http://maven.apache.org/download.html]

 

=== Check Out Project from SVN Server===

==== Checkout a working copy in Eclipse ====

{{{
File->New->Other->SVN->Check Out Projects from SVN
}}} 
Then you enter the SVN server address
{{{
http://sigma-h.googlecode.com/svn/trunk
}}} 
Choose the folder *Sigmah* to check out.

Make sure you choose _check out as a  project configured using the New Project Wizard_ and then choose the _Java->Java Project_ .

*Note:* You may have a "Missing artifact com.sun:tools:jar:1.5.0" error on the pom.xml. To solve it, add the argument -vm path\to\jdk\bin(ex. C:\Program Files\Java\jdk1.6.0_43\bin) in the eclipse.ini in the eclipse folder. Beware of adding this option before the -vmargs option.

<font color="red"><strong><i>Important temporary note:</i></strong></font> currently, the maven build will not work due to missing library on the Maven repository. We're fixing this by setting up a new Maven repository elsewhere. In the meantime, the solution is to download and install those libraries manually. Those jar libraries can be downloaded from this location: http://code.google.com/p/sigma-h/downloads/detail?name=missing-jar-to-build-Sigmah.zip . To install those libraries, here is the [http://maven.apache.org/guides/mini/guide-3rd-party-jars-local.html documentation], and the commands you should use:
{{{
mvn install:install-file -Dfile=..\..\missing-jar-to-build-Sigmah\gwt-maps-1.1.1.jar -DgroupId=com.google.gwt.google-apis -DartifactId=gwt-maps -Dversion=1.1.1 -Dpackaging=jar
mvn install:install-file -Dfile=..\..\missing-jar-to-build-Sigmah\gxt-2.2.5-gwt22.jar -DgroupId=com.extjs -DartifactId=gxt -Dversion=2.2.5-gwt22 -Dpackaging=jar
}}}

==== Enable Maven Dependency Management ====

After you check out the project to your IDE workspace, you may have many errors. It is normal because you should enable the Maven Dependency Management 
{{{
Right-Click Project->Maven->Enable Dependency Management
}}} 

Then you refresh your project. 

*Note:* If you do not have a Maven menu by right clicking your project in Eclipse, you might need to convert it to a Maven project.
{{{
Right-Click Project->Configure->Convert to Maven project
}}}
If you can't see this option or it doesn't work, it means your maven plugin is not completely installed.

=== Set Up Local Database ===

As a developer, before you test the sigmah project, you have to set up your own database system.
Sigmah is now based on the database system MySql 5. But it also works with Postgresql 8 +.

==== Create the Database ====

In order to create a correct database for Sigmah and populate your database with default data, you can run step by step all the SQL scripts contained in this zip file:

# [http://code.google.com/p/sigma-h/downloads/list MinimumDataKit-1.0-postgresql]

# [http://code.google.com/p/sigma-h/downloads/list New Organization creation script (for Postgresql or Mysql)]

You can use some graphical management tools to accomplish that task, such as _phpMyAdmin_ for Mysql and _phpPgAdmin_ for postgresql.


==== Configure Project to Use Local Database ====

Now you should tell Sigmah project to use your own database. All you need to do is just to modify some values in a properties file: _Sigmah.properties_,which is in _main/resources/sigmah.properties_. 

For Mysql 5, it should like this:

{{{
#
# All Sigmah code is released under the GNU General Public License v3
# See COPYRIGHT.txt and LICENSE.txt.
#

hibernate.dialect=org.hibernate.dialect.MySQLDialect
hibernate.connection.driver_class=com.mysql.jdbc.Driver
hibernate.connection.username=your_username
hibernate.connection.password=your_password
hibernate.connection.url=jdbc:mysql://localhost:3306/your_database
hibernate.hbm2ddl.auto=update
hibernate.show_sql=true
hibernate.format_sql=true

}}}

For Postgresql it should like this:

{{{

hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
hibernate.connection.driver_class=org.postgresql.Driver
hibernate.connection.username=your_username
hibernate.connection.password=your_password
hibernate.connection.url=jdbc:postgresql://localhost:5432/your_database
hibernate.hbm2ddl.auto=update
hibernate.show_sql=false
hibernate.format_sql=false


}}}

You should make sure the user that you specify has enough rights to access and modify the database. The user is the owner is of the database, for example.

=== Build and Debug Sigmah ===

Now it is ready to build and debug our Sigmah project.

==== Set Up Debug Configuration ====

{{{
Run->Debug Configuration->Maven Build
}}}
and then
{{{
Right-Click Maven Build ->New
}}}

Rename the configuration as you want.Then you will have some properties to configure:
{{{
Base Directory: your project directory
Goals: gwt:run
Profiles: sigmah
Debug output: check
Offline: check

Add a parameter
  Parameter name: -Dgwt:run  Value:9999
}}}

Create another run configuration for generation of the sources automatically.For example,every time you create a new key/value paire in the .properties files, you could run eclipse with this configuration to generate the Java code.
{{{
Base Directory: your project directory
Goals: generate-sources
Profiles: sigmah
Debug output: check
Offline: check
}}}


This kind of Debug configuration will launch the GWT Development Mode for Sigmah project. Maven will be responsible for downloading all dependencies including GWT Libraries,GXT Libraries into a local repository(By default, it is ~/.m2/repository). 

The *_offline_ feature* makes Maven use the local repository to build your project after the first build. If you want Maven to download all libraries every time, you uncheck that feature.

After you finish the configuration of the Debug, you could start to debug.

==== Resolve the "OutOfMemory" Problem ====

For this moment, when you launch sigmah in GWT Development Mode,you may have a "OutOfMemory:PermSpace" error. To solve this error, you should specify a bigger PermSpace in the *Pom.xml* file, which is in your project root directory.
{{{

            <!--  configure the GWT-Maven plugin -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>gwt-maven-plugin</artifactId>
                <version>1.2</version>
                <configuration>
                    <runTarget>/</runTarget>
                    <logLevel>TRACE</logLevel>
                    <inplace>false</inplace>
                    <gwtVersion>${gwtVersion}</gwtVersion>
                    <port>9090</port>
                    <module>org.sigmah.ActivityInfoProduction</module>
                    <webappDirectory>${basedir}/war</webappDirectory>
                    <warSourceDirectory>${basedir}/war</warSourceDirectory>
                    <extraJvmArgs>-Xmx512M -Xss1M -XX:MaxPermSize=512M
                    </extraJvmArgs>                                                                
                </configuration>

}}}

For the _extraJvmArgs_ property, you can add a new option *-XX:MaxPermSize* to give a bigger Perm Space.