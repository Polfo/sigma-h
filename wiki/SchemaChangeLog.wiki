#summary Breaking changes to the underlying SQL database schema
#labels Featured
#sidebar ContributorGuideSideBar

= Introduction =

Every attempt will be made to keep new versions of Sigmah backwards compatible with SQL databases created with earlier versions of Sigmah/ActivityInfo, but sometimes there will be a need for breaking changes. These can be found here.

= Release 1.0-rc2 =

== 1. Schema changes ==

{{{

ALTER TABLE userdatabase ALTER COLUMN FullName TYPE VARCHAR(500);

ALTER TABLE org_unit_model DROP COLUMN min_level;

ALTER TABLE org_unit_model DROP COLUMN max_level;

}}}

= Release 1.0 =

== 1. Schema changes ==

{{{

ALTER TABLE partner ADD COLUMN deleted timestamp without time zone;

}}}

_For MySQL databases, use instead:_
ALTER TABLE partner ADD COLUMN deleted DATETIME DEFAULT NULL;

{{{ 
CREATE TABLE  indicator_datasource (
  IndicatorId int(11) NOT NULL,
  IndicatorSourceId int(11) NOT NULL,
  PRIMARY KEY (IndicatorId,IndicatorSourceId),
  KEY `FK7A87F87547C62157` (IndicatorId),
  KEY `FK7A87F8755038B772` (IndicatorSourceId)
);

}}}

Note: all existing logframe elements will be lost. I'm not aware of any real logframes in the wild yet, but if there are they will have to be migrated by hand to redo the ids. 

{{{

DROP TABLE log_frame_expected_result;
DROP TABLE log_frame_specific_objective;
DROP TABLE log_frame_activity;

CREATE TABLE  log_frame_element (
  id_element int(11) NOT NULL AUTO_INCREMENT,
  assumptions text,
  code int(11) NOT NULL,
  position int(11) DEFAULT NULL,
  risks text,
  id_group int(11) DEFAULT NULL,
  PRIMARY KEY (`id_element`),
  KEY `FK5A2E206F4F6005EE` (id_group)
);

CREATE TABLE  log_frame_specific_objective (
  `intervention_logic` text,
  `id_element` int(11) NOT NULL,
  `id_log_frame` int(11) NOT NULL,
  PRIMARY KEY (`id_element`),
  KEY `FKC979EF199BC5C4DA` (`id_log_frame`),
  KEY `FKC979EF19E41DAE8` (`id_element`)
);

CREATE TABLE  log_frame_expected_result (
  `intervention_logic` text,
  `id_element` int(11) NOT NULL,
  `id_specific_objective` int(11) NOT NULL,
  PRIMARY KEY (`id_element`),
  KEY `FK99D3DDF7D88379D4` (`id_specific_objective`),
  KEY `FK99D3DDF7E41DAE8` (`id_element`)
);

CREATE TABLE log_frame_activity (
  advancement int(11) DEFAULT NULL,
  endDate datetime DEFAULT NULL,
  startDate datetime DEFAULT NULL,
  title text,
  id_element int(11) NOT NULL,
  id_result int(11) NOT NULL,
  PRIMARY KEY (`id_element`),
  KEY `FK89611FFC8012BC39` (`id_result`),
  KEY `FK89611FFCE41DAE8` (`id_element`)
);

CREATE TABLE  log_frame_indicators (
  `log_frame_element_id_element` int(11) NOT NULL,
  `indicators_IndicatorId` int(11) NOT NULL,
  PRIMARY KEY (`log_frame_element_id_element`,`indicators_IndicatorId`),
  KEY `FK17E5A9F1F6E4C4B8` (`log_frame_element_id_element`),
  KEY `FK17E5A9F1A023DDC` (`indicators_IndicatorId`)
);

}}}

= Release 0.9.1 =

== 1. Schema changes ==

From 0.9 to 0.9.1, the following changes have to be performed on the schema:

{{{

ALTER TABLE log_frame DROP COLUMN title;

ALTER TABLE project ADD COLUMN activity_advancement INTEGER ;

ALTER TABLE log_frame_activity ADD COLUMN advancement INTEGER ;

ALTER TABLE projectreport ADD COLUMN orgunit_partnerid INTEGER ;

ALTER TABLE category_type ADD COLUMN id_organization INTEGER ;

ALTER TABLE category_element ADD COLUMN id_organization INTEGER ;

ALTER TABLE quality_framework ADD COLUMN id_organization INTEGER ;

ALTER TABLE quality_criterion ADD COLUMN id_organization INTEGER ;

ALTER TABLE privacy_group ADD COLUMN id_organization INTEGER ;

ALTER TABLE profile ADD COLUMN id_organization INTEGER ;

ALTER TABLE projectreportmodel ADD COLUMN id_organization INTEGER ;

ALTER TABLE org_unit_model ADD COLUMN id_organization INTEGER ;

ALTER TABLE monitored_point ADD COLUMN deleted BIT(1);

ALTER TABLE reminder ADD COLUMN deleted BIT(1);

}}}

== 2. Existing data updates ==

*After the schema is updated*, in order to update the existing data, the following requests have to be applied: (requests only valid for database with a single organization)


{{{

UPDATE category_type SET id_organization = (SELECT MAX(id_organization) FROM organization WHERE id_root_org_unit IS NOT NULL) ;

UPDATE category_element SET id_organization = (SELECT MAX(id_organization) FROM organization WHERE id_root_org_unit IS NOT NULL);

UPDATE quality_framework SET id_organization  = (SELECT MAX(id_organization) FROM organization WHERE id_root_org_unit IS NOT NULL);

UPDATE quality_criterion SET id_organization  = (SELECT MAX(id_organization) FROM organization WHERE id_root_org_unit IS NOT NULL);

UPDATE privacy_group SET id_organization  = (SELECT MAX(id_organization) FROM organization WHERE id_root_org_unit IS NOT NULL);

UPDATE profile SET id_organization  = (SELECT MAX(id_organization) FROM organization WHERE id_root_org_unit IS NOT NULL);

UPDATE projectreportmodel SET id_organization  = (SELECT MAX(id_organization) FROM organization WHERE id_root_org_unit IS NOT NULL);

UPDATE org_unit_model SET id_organization  = (SELECT MAX(id_organization) FROM organization WHERE id_root_org_unit IS NOT NULL);

}}}

= Release 0.9 =

From 0.8.1 to 0.9, the following changes have to be performed on the schema:


{{{
DROP TABLE report;

ALTER TABLE project_model ADD COLUMN status VARCHAR(20) DEFAULT 'READY';
UPDATE project_model SET status = 'READY' WHERE status IS NULL;

ALTER TABLE org_unit_model ADD COLUMN status VARCHAR(20) DEFAULT 'READY';
UPDATE org_unit_model SET status = 'READY' WHERE status IS NULL;

ALTER TABLE Indicator CHANGE ActivityId ActivityId int(11) NULL;
ALTER TABLE Indicator CHANGE Units Units varchar(15) NULL;

ALTER TABLE locationtype CHANGE LocationTypeId LocationTypeId int(11) NOT NULL AUTO_INCREMENT; 

ALTER TABLE Site CHANGE ActivityId ActivityId int(11) NULL;
}}}



= Release 0.70 =

A large number of domain objects have been added since the last full release of ActivityInfo (0.5.11). Users are advised to let hibernate create a new schema and import your existing data into the new structure with a mapping tool.

[http://opendbcopy.sourceforge.net/ OpenDbCopy] is a good tool that we have used for ActivityInfo.org.

* WARNING *: Do NOT attempt to use hibernate's schema update feature on production data! This is a [http://stackoverflow.com/questions/221379/hibernate-hbm2ddl-autoupdate-in-production good posting] on why this is not OK.

In addition, to use the new offline features, you will need to update your data to meet certain assumptions made by the synchronization module. 

Specifically, the synchronizer uses timestamps to divide updates into batches. Since early versions of AI did not maintain timestamps, your database may have a large number of records with the same timestamp. Future versions of AI/Sigmah may be capable of more sophisticated batching but for the time being you can "salt" your data with the following SQL:

{{{
UPDATE Location SET dateEdited = date_add(dateEdited, INTERVAL LocationId SECOND) where second(dateEdited) = 0;

UPDATE Site SET dateEdited = date_add(dateEdited, INTERVAL LocationId SECOND) where second(dateEdited) = 0;
}}}
 


= Revision r138 = 

  * The columns !changePasswordKey and !dateChangePasswordKeyIssued have been added to the !UserLogin table

{{{
alter table UserLogin add changePasswordKey nvarchar(64)
alter table UserLogin add dateChangePasswordKeyIssued date
}}}


= November 30, 2009 / Release 0.5.6 =

  * The columns !ManageUsers, !ManageAllUsers have been added to the !UserPermissions table.
{{{
ALTER TABLE UserPermission ADD
  AllowManageUsers bit NOT NULL 
     CONSTRAINT DF_UserPermission_AllowManageUsers DEFAULT 0,
  AllowManageAllUsers bit NOT NULL 
     CONSTRAINT DF_UserPermission_AllowManageAllusers DEFAULT 0
}}}